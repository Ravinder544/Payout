

/*
 This class has been generated by the Code Generator
 */
package com.ipru_dbmetadata;

import java.io.File;
import java.io.FileOutputStream;
import java.io.StringReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObject;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.Config;
import com.cordys.cpc.bsf.busobject.DMLStatement;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.busobject.exception.BsfConstraintViolationException;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.util.Base64;
import com.eibus.util.system.EIBProperties;
import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;
import com.ipru.payout.util.PropertyUtil;
import com.cordys.cpc.bsf.query.xqy.XqyResultSet;

public class LA_TRANSACTION_DETAILS extends LA_TRANSACTION_DETAILSBase {
	/*
	 * 
	 * public static String createMandate(String call_id)
	 * 
	 * {
	 * 
	 * 
	 * 
	 * int rowcount=0;
	 * 
	 * int rowcount1=0;
	 * 
	 * try
	 * 
	 * {
	 * 
	 * String queryText =
	 * "select count(*) as count from  (SELECT distinct la_spool.callid,la_transaction_details.bank_account_no,la_transaction_details.ifsc_code,la_transaction_details.micr_code FROM la_spool left JOIN  la_transaction_details ON la_transaction_details.TYPE_OF_ACCOUNT    = la_spool.ACCOUNTTYPE AND la_transaction_details.MICR_CODE      = la_spool.MICR_CODE AND la_transaction_details.BANK_ACCOUNT_NO = la_spool.ACCOUNT_NO and la_transaction_details.call_id= la_spool.callid where la_transaction_details.call_id='35619628' and la_transaction_details.processed_by='D2')"
	 * ;
	 * 
	 * QueryObject query = new QueryObject(queryText);
	 * 
	 * query.addParameter("call_id",
	 * LA_TRANSACTION_DETAILS.ATTR_CALL_ID,QueryObject.PARAM_STRING,"call_id");
	 * 
	 * rowcount = new Integer(query.getObject().getStringProperty("COUNT"));
	 * 
	 * if(rowcount==1) //Spaarc == D2
	 * 
	 * {
	 * 
	 * // insertnewrocrd(call_id);
	 * 
	 * return "new records";
	 * 
	 * }
	 * 
	 * else
	 * 
	 * {
	 * 
	 * String queryText1 =
	 * "select count(*) as count from ( SELECT  distinct call_id,BANK_ACCOUNT_NO,TYPE_OF_ACCOUNT,MICR_CODE FROM la_transaction_details where call_id=:call_id)"
	 * ;
	 * 
	 * QueryObject query1 = new QueryObject(queryText1);
	 * 
	 * query1.addParameter("call_id",
	 * LA_TRANSACTION_DETAILS.ATTR_CALL_ID,QueryObject.PARAM_STRING,"call_id");
	 * 
	 * rowcount1 = new Integer(query1.getObject().getStringProperty("COUNT"));
	 * 
	 * if(rowcount1==1) // D1=D12
	 * 
	 * {
	 * 
	 * // insertnewrocrd(call_id);
	 * 
	 * return "new records";
	 * 
	 * }
	 * 
	 * else
	 * 
	 * {
	 * 
	 * // insertnewrocrd(call_id);
	 * 
	 * return "Assign to Manager";
	 * 
	 * }
	 * 
	 * 
	 * 
	 * }
	 * 
	 * }
	 * 
	 * 
	 * 
	 * catch(Exception e)
	 * 
	 * {
	 * 
	 * throw new BsfConstraintViolationException("Error while inserting data");
	 * 
	 * }
	 * 
	 * 
	 * 
	 * 
	 * 
	 * // return null;
	 * 
	 * 
	 * 
	 * 
	 * 
	 * }
	 */
	/**
	 * 
	 * @compareAndCreateMandate compares the data of spaarc,D1,D2 and mananger
	 *                          and on condition satisfy, creates the mandate .
	 * 
	 * @param callId
	 * 
	 * @return
	 * 
	 * 
	 */

	public static void callFunction(LA_TRANSACTION_DETAILS spaarcMandate) {
		String uuid = UUID.randomUUID().toString();
		BSF.startTransaction(uuid);
		spaarcMandate.setDATAENTRY("ENTRY2-SPAARC");
		spaarcMandate.setSTATUS("ENTRY2 DONE");
		spaarcMandate.setSEQ_NO(null);
		spaarcMandate.insert();
		BSF.commitTransaction(uuid);

	}

	public static String compareAndCreateMandate(String callId)
			throws BsfConstraintViolationException {
		// Get Spool Object
		String uuid = UUID.randomUUID().toString();

		LA_SPOOL spoolObject = LA_SPOOL.getObjectByCallId(callId);
		LA_TRANSACTION_DETAILS mandate = null;
		LA_TRANSACTION_DETAILS transObject = null;
		boolean createMandateFlag = false;
		String responseMsg = "";
		/*
		 * if(spoolObject.getSTAGE_ID()!=1){ BSF.startTransaction(uuid); }
		 */

		if (spoolObject == null) {
			// throw new
			// BsfRuntimeException("Data not found in table for call id:"+callId);
			responseMsg = "Data not found in table for call id:" + callId;
		}
		// Get Mandates for Call ID
		Map<String, LA_TRANSACTION_DETAILS> mandates = getMapObject(
				getMandatesByCallId(callId), "DATAENTRY");
		if (mandates == null || mandates.size() == 0) {
			// throw new
			// BsfConstraintViolationException("Mandate dataentry not done by maker and checker");
			responseMsg = "Mandate dataentry not done by maker and checker";
		}
		if (mandates.containsKey("MANDATE")) {
			// throw new
			// BsfConstraintViolationException("Mandate already created");
			responseMsg = "Mandate already created";
		}
		if (!mandates.containsKey("ENTRY1") && !mandates.containsKey("ENTRY2")) {
			// throw new
			// BsfConstraintViolationException("Mandate dataentry not found");
			responseMsg = "Mandate dataentry not found";
		}

		String CustomerName="";
		if(spoolObject.getIFOWNER().equalsIgnoreCase("YES") )
		{
			CustomerName=spoolObject.getCUST_FULL_NAME();
		}
		else
		{
			CustomerName=spoolObject.getASSIGNEE_NAME();
		}
		if (spoolObject.getSTAGE_ID() == 1) {
			if ((spoolObject.getOCR_RESULT() != null)) {
				// Compare D1 and Spaarc
				LA_TRANSACTION_DETAILS mandate1 = mandates.get("ENTRY1");
				mandate = mandate1;
				
				if(mandate1.getPAY_TYPE().equalsIgnoreCase("B") || mandate1.getPAY_TYPE().equalsIgnoreCase("G"))
				{
					
					
					if (mandate1.getBANK_ACCOUNT_NO().compareToIgnoreCase(
								spoolObject.getACCOUNT_NO() == null ? ""
										: spoolObject.getACCOUNT_NO()) == 0
						&& mandate1.getNAME_OF_BANK_ACT_HOLDER().compareTo(
								CustomerName == null ? ""
										: CustomerName) == 0
						&& mandate1.getIFSC_CODE().compareTo(
								spoolObject.getIFSC_CODE() == null ? ""
										: spoolObject.getIFSC_CODE()) == 0) {
					// insert mandate as final mandate
					createMandateFlag = true;

					LA_TRANSACTION_DETAILS spaarcMandate = (LA_TRANSACTION_DETAILS) mandate1
							.clone();
					callFunction(spaarcMandate);

					// createMandate(mandate2);
					// update the stage id to 4
					BSF.startTransaction(uuid);
					spoolObject.setSTAGE_ID(4);
					spoolObject.setASSIGN_TO(null);
					spoolObject.setSTATUS("CREATE MANDATE");

				} 
				
				
				else {
					BSF.startTransaction(uuid);
					spoolObject.setSTAGE_ID(2);
					spoolObject.setASSIGN_TO(null);
					spoolObject.setSTATUS("ASSIGN TO ENTRY2");

				}
				}
				else if (mandate1.getPAY_TYPE().equalsIgnoreCase("5") || mandate1.getPAY_TYPE().equalsIgnoreCase("F"))
				{
					if (mandate1.getBANK_ACCOUNT_NO().compareToIgnoreCase(
							spoolObject.getACCOUNT_NO() == null ? ""
									: spoolObject.getACCOUNT_NO()) == 0
					&& mandate1.getNAME_OF_BANK_ACT_HOLDER().compareTo(
							CustomerName == null ? ""
									: CustomerName) == 0)
					 {
					// insert mandate as final mandate
					createMandateFlag = true;

					LA_TRANSACTION_DETAILS spaarcMandate = (LA_TRANSACTION_DETAILS) mandate1
							.clone();
					callFunction(spaarcMandate);

					// createMandate(mandate2);
					// update the stage id to 4
					BSF.startTransaction(uuid);
					spoolObject.setSTAGE_ID(4);
					spoolObject.setASSIGN_TO(null);
					spoolObject.setSTATUS("CREATE MANDATE");

				} 
				
				
				else {
					BSF.startTransaction(uuid);
					spoolObject.setSTAGE_ID(2);
					spoolObject.setASSIGN_TO(null);
					spoolObject.setSTATUS("ASSIGN TO ENTRY2");

				}
				}
				else{
				if (mandate1.getTYPE_OF_ACCOUNT().compareToIgnoreCase(
						spoolObject.getACCOUNTTYPE() == null ? "" : spoolObject
								.getACCOUNTTYPE()) == 0
						&& mandate1.getBANK_ACCOUNT_NO().compareToIgnoreCase(
								spoolObject.getACCOUNT_NO() == null ? ""
										: spoolObject.getACCOUNT_NO()) == 0
						&& mandate1.getBANK_NAME().compareTo(
								spoolObject.getBANKNAME() == null ? ""
										: spoolObject.getBANKNAME()) == 0
						&& mandate1.getPAYOUT_TYPE().compareTo(
								spoolObject.getPAY_OUT_TYPE() == null ? ""
										: spoolObject.getPAY_OUT_TYPE()) == 0
						&& Double.compare(mandate1.getPAYOUT_AMOUNT(),
								spoolObject.getPAYMENT_AMOUNT()) == 0) {
					// insert mandate as final mandate
					createMandateFlag = true;

					LA_TRANSACTION_DETAILS spaarcMandate = (LA_TRANSACTION_DETAILS) mandate1
							.clone();
					callFunction(spaarcMandate);

					// createMandate(mandate2);
					// update the stage id to 4
					BSF.startTransaction(uuid);
					spoolObject.setSTAGE_ID(4);
					spoolObject.setASSIGN_TO(null);
					spoolObject.setSTATUS("CREATE MANDATE");

				} 
				
				
				else {
					BSF.startTransaction(uuid);
					spoolObject.setSTAGE_ID(2);
					spoolObject.setASSIGN_TO(null);
					spoolObject.setSTATUS("ASSIGN TO ENTRY2");

				}
				}
			} else {
				// the case is now with the D1 team
				BSF.startTransaction(uuid);
				spoolObject.setSTAGE_ID(2);
				spoolObject.setASSIGN_TO(null);
				spoolObject.setSTATUS("ASSIGN TO ENTRY2");
			}
		} else if (spoolObject.getSTAGE_ID() == 2) {
			// the case is now with the D2 team
			// Check SPAARC with D2
			LA_TRANSACTION_DETAILS mandate2 = mandates.get("ENTRY2");
			mandate = mandates.get("ENTRY2");
			if(mandate2.getPAY_TYPE().equalsIgnoreCase("B") || mandate2.getPAY_TYPE().equalsIgnoreCase("G"))
				{
					if (mandate2.getBANK_ACCOUNT_NO().compareToIgnoreCase(
								spoolObject.getACCOUNT_NO() == null ? ""
										: spoolObject.getACCOUNT_NO()) == 0
						&& mandate2.getNAME_OF_BANK_ACT_HOLDER().compareTo(
								CustomerName == null ? ""
										: CustomerName) == 0
						&& mandate2.getIFSC_CODE().compareTo(
								spoolObject.getIFSC_CODE() == null ? ""
										: spoolObject.getIFSC_CODE()) == 0) {

				// insert mandate as final mandate
				createMandateFlag = true;
				// createMandate(mandate2);
				// update the stage id to 4
				BSF.startTransaction(uuid);
				spoolObject.setSTAGE_ID(4);
				spoolObject.setASSIGN_TO(null);
				spoolObject.setSTATUS("CREATE MANDATE");
				}
					else 
					{
						
				LA_TRANSACTION_DETAILS mandate1 = mandates.get("ENTRY1");
				if (mandate1 != null) {
					// mandate=mandates.get("ENTRY1");
					if (mandate2.getBANK_ACCOUNT_NO().compareToIgnoreCase(
							mandate1.getBANK_ACCOUNT_NO() == null ? ""
									: mandate1.getBANK_ACCOUNT_NO()) == 0
							// commented the micr code
							// +mandate2.getMICR_CODE().compareToIgnoreCase(mandate1.getMICR_CODE()
							// == null ?"":mandate1.getMICR_CODE())
							&& mandate2
									.getTYPE_OF_ACCOUNT()
									.compareToIgnoreCase(
											mandate1.getTYPE_OF_ACCOUNT() == null ? ""
													: mandate1
															.getTYPE_OF_ACCOUNT()) == 0
							&& mandate2.getBANK_NAME().compareTo(
									mandate1.getBANK_NAME() == null ? ""
											: mandate1.getBANK_NAME()) == 0
							&& Double.compare(mandate2.getPAYOUT_AMOUNT(),
									mandate1.getPAYOUT_AMOUNT()) == 0
							&& mandate2.getSACS_CODE().compareToIgnoreCase(
									mandate1.getSACS_CODE() == null ? ""
											: mandate1.getSACS_CODE()) == 0
							&& mandate2.getSACS_TYPE().compareToIgnoreCase(
									mandate1.getSACS_TYPE() == null ? ""
											: mandate1.getSACS_TYPE()) == 0
							&& mandate2.getPAYOUT_TYPE().compareToIgnoreCase(
									mandate1.getPAYOUT_TYPE() == null ? ""
											: mandate1.getPAYOUT_TYPE()) == 0
							&& mandate2.getPAY_TYPE().compareToIgnoreCase(
									mandate1.getPAY_TYPE() == null ? ""
											: mandate1.getPAY_TYPE()) == 0) {
						// insert mandate as final mandate
						createMandateFlag = true;
						// createMandate(mandate2);
						// update the stage id to 4
						BSF.startTransaction(uuid);
						spoolObject.setSTAGE_ID(4);
						spoolObject.setASSIGN_TO(null);
						spoolObject.setSTATUS("CREATE MANDATE");
					} else {
						BSF.startTransaction(uuid);
						spoolObject.setSTAGE_ID(3);
						spoolObject.setASSIGN_TO(null);
						spoolObject.setSTATUS("ASSIGN TO MANAGER");
					}
				} else {
					// escalate to manager
					BSF.startTransaction(uuid);
					spoolObject.setSTAGE_ID(3);
					spoolObject.setASSIGN_TO(null);
					spoolObject.setSTATUS("ASSIGN TO MANAGER");
				}
			
					
					}
				}
			else if (mandate2.getPAY_TYPE().equalsIgnoreCase("5") || mandate2.getPAY_TYPE().equalsIgnoreCase("F"))
				{
					if (mandate2.getBANK_ACCOUNT_NO().compareToIgnoreCase(
							spoolObject.getACCOUNT_NO() == null ? ""
									: spoolObject.getACCOUNT_NO()) == 0
					&& mandate2.getNAME_OF_BANK_ACT_HOLDER().compareTo(
							CustomerName == null ? ""
									: CustomerName) == 0) {
				// insert mandate as final mandate
				createMandateFlag = true;
				// createMandate(mandate2);
				// update the stage id to 4
				BSF.startTransaction(uuid);
				spoolObject.setSTAGE_ID(4);
				spoolObject.setASSIGN_TO(null);
				spoolObject.setSTATUS("CREATE MANDATE");
				}
					else {
						
				LA_TRANSACTION_DETAILS mandate1 = mandates.get("ENTRY1");
				if (mandate1 != null) {
					// mandate=mandates.get("ENTRY1");
					if (mandate2.getBANK_ACCOUNT_NO().compareToIgnoreCase(
							mandate1.getBANK_ACCOUNT_NO() == null ? ""
									: mandate1.getBANK_ACCOUNT_NO()) == 0
							// commented the micr code
							// +mandate2.getMICR_CODE().compareToIgnoreCase(mandate1.getMICR_CODE()
							// == null ?"":mandate1.getMICR_CODE())
							&& mandate2
									.getTYPE_OF_ACCOUNT()
									.compareToIgnoreCase(
											mandate1.getTYPE_OF_ACCOUNT() == null ? ""
													: mandate1
															.getTYPE_OF_ACCOUNT()) == 0
							&& mandate2.getBANK_NAME().compareTo(
									mandate1.getBANK_NAME() == null ? ""
											: mandate1.getBANK_NAME()) == 0
							&& Double.compare(mandate2.getPAYOUT_AMOUNT(),
									mandate1.getPAYOUT_AMOUNT()) == 0
							&& mandate2.getSACS_CODE().compareToIgnoreCase(
									mandate1.getSACS_CODE() == null ? ""
											: mandate1.getSACS_CODE()) == 0
							&& mandate2.getSACS_TYPE().compareToIgnoreCase(
									mandate1.getSACS_TYPE() == null ? ""
											: mandate1.getSACS_TYPE()) == 0
							&& mandate2.getPAYOUT_TYPE().compareToIgnoreCase(
									mandate1.getPAYOUT_TYPE() == null ? ""
											: mandate1.getPAYOUT_TYPE()) == 0
							&& mandate2.getPAY_TYPE().compareToIgnoreCase(
									mandate1.getPAY_TYPE() == null ? ""
											: mandate1.getPAY_TYPE()) == 0) {
						// insert mandate as final mandate
						createMandateFlag = true;
						// createMandate(mandate2);
						// update the stage id to 4
						BSF.startTransaction(uuid);
						spoolObject.setSTAGE_ID(4);
						spoolObject.setASSIGN_TO(null);
						spoolObject.setSTATUS("CREATE MANDATE");
					} else {
						BSF.startTransaction(uuid);
						spoolObject.setSTAGE_ID(3);
						spoolObject.setASSIGN_TO(null);
						spoolObject.setSTATUS("ASSIGN TO MANAGER");
					}
				} else {
					// escalate to manager
					BSF.startTransaction(uuid);
					spoolObject.setSTAGE_ID(3);
					spoolObject.setASSIGN_TO(null);
					spoolObject.setSTATUS("ASSIGN TO MANAGER");
				}
			
					}
				}
				else
				{
			if (mandate2.getTYPE_OF_ACCOUNT().compareToIgnoreCase(
					spoolObject.getACCOUNTTYPE() == null ? "" : spoolObject
							.getACCOUNTTYPE()) == 0
					// commented the micr code
					// +mandate2.getMICR_CODE().compareToIgnoreCase(spoolObject.getMICR_CODE()
					// == null ? "":spoolObject.getMICR_CODE())
					&& mandate2.getBANK_ACCOUNT_NO().compareToIgnoreCase(
							spoolObject.getACCOUNT_NO() == null ? ""
									: spoolObject.getACCOUNT_NO()) == 0
					&& mandate2.getBANK_NAME().compareTo(
							spoolObject.getBANKNAME() == null ? ""
									: spoolObject.getBANKNAME()) == 0
					&& mandate2.getPAYOUT_TYPE().compareTo(
							spoolObject.getPAY_OUT_TYPE() == null ? ""
									: spoolObject.getPAY_OUT_TYPE()) == 0
					&& Double.compare(mandate2.getPAYOUT_AMOUNT(),
							spoolObject.getPAYMENT_AMOUNT()) == 0) {
				// insert mandate as final mandate
				createMandateFlag = true;
				// createMandate(mandate2);
				// update the stage id to 4
				BSF.startTransaction(uuid);
				spoolObject.setSTAGE_ID(4);
				spoolObject.setASSIGN_TO(null);
				spoolObject.setSTATUS("CREATE MANDATE");
			} 
			
				
			else {
				LA_TRANSACTION_DETAILS mandate1 = mandates.get("ENTRY1");
				if (mandate1 != null) {
					// mandate=mandates.get("ENTRY1");
					if (mandate2.getBANK_ACCOUNT_NO().compareToIgnoreCase(
							mandate1.getBANK_ACCOUNT_NO() == null ? ""
									: mandate1.getBANK_ACCOUNT_NO()) == 0
							// commented the micr code
							// +mandate2.getMICR_CODE().compareToIgnoreCase(mandate1.getMICR_CODE()
							// == null ?"":mandate1.getMICR_CODE())
							&& mandate2
									.getTYPE_OF_ACCOUNT()
									.compareToIgnoreCase(
											mandate1.getTYPE_OF_ACCOUNT() == null ? ""
													: mandate1
															.getTYPE_OF_ACCOUNT()) == 0
							&& mandate2.getBANK_NAME().compareTo(
									mandate1.getBANK_NAME() == null ? ""
											: mandate1.getBANK_NAME()) == 0
							&& Double.compare(mandate2.getPAYOUT_AMOUNT(),
									mandate1.getPAYOUT_AMOUNT()) == 0
							&& mandate2.getSACS_CODE().compareToIgnoreCase(
									mandate1.getSACS_CODE() == null ? ""
											: mandate1.getSACS_CODE()) == 0
							&& mandate2.getSACS_TYPE().compareToIgnoreCase(
									mandate1.getSACS_TYPE() == null ? ""
											: mandate1.getSACS_TYPE()) == 0
							&& mandate2.getPAYOUT_TYPE().compareToIgnoreCase(
									mandate1.getPAYOUT_TYPE() == null ? ""
											: mandate1.getPAYOUT_TYPE()) == 0
							&& mandate2.getPAY_TYPE().compareToIgnoreCase(
									mandate1.getPAY_TYPE() == null ? ""
											: mandate1.getPAY_TYPE()) == 0) {
						// insert mandate as final mandate
						createMandateFlag = true;
						// createMandate(mandate2);
						// update the stage id to 4
						BSF.startTransaction(uuid);
						spoolObject.setSTAGE_ID(4);
						spoolObject.setASSIGN_TO(null);
						spoolObject.setSTATUS("CREATE MANDATE");
					} else {
						BSF.startTransaction(uuid);
						spoolObject.setSTAGE_ID(3);
						spoolObject.setASSIGN_TO(null);
						spoolObject.setSTATUS("ASSIGN TO MANAGER");
					}
				} else {
					// escalate to manager
					BSF.startTransaction(uuid);
					spoolObject.setSTAGE_ID(3);
					spoolObject.setASSIGN_TO(null);
					spoolObject.setSTATUS("ASSIGN TO MANAGER");
				}
			}
			}
		} else if (spoolObject.getSTAGE_ID() == 3) {
			// the case is now with the manager team
			// insert the mandate as final mandate
			createMandateFlag = true;
			mandate = mandates.get("ENTRY3");
			// createMandate(mandates.get("ENTRY3"));
			BSF.startTransaction(uuid);
			spoolObject.setSTAGE_ID(4);
			spoolObject.setASSIGN_TO(null);
			spoolObject.setSTATUS("CREATE MANDATE");
		}
		// update the SPOOL Object
		spoolObject.update();
		BSF.commitTransaction(uuid);
		if (createMandateFlag) {

			createMandate(mandate);

		}
		// Get the Updated SPOOL Object
		spoolObject = LA_SPOOL.getObjectByCallId(spoolObject.getCALLID());
		// check if Mandate Process has to be call for this call id
		if (spoolObject.getSTAGE_ID() == 4) {
			String status = null;
			try {
				String user = BSF.getUser();
				// user=user.substring(3, user.indexOf(","));
				String nameSpace = "http://schemas.cordys.com/bpm";
				String methodName = "AutomateMandate";
				String[] param = { "callId" };
				String[] value = { callId };
				SOAPRequestObject soapReq = new SOAPRequestObject(nameSpace,
						methodName, param, value);
				soapReq.setUser(user);
				int response = soapReq.execute();
				status = Node.getData(XPath.getFirstMatch(
						".//*[local-name()='status']", null, response), null);
				String message = Node.getData(XPath.getFirstMatch(
						".//*[local-name()='message']", null, response), null);
				if ("Failure".equalsIgnoreCase(status)) {
					// throw new
					// BsfConstraintViolationException("Error occurred in AutomateMandate:  "+message);
					responseMsg = "Error occurred in AutomateMandate:  "
							+ message;
				} else {
					// responseMsg="Mandate Created Successfully";
					responseMsg = message;
				}
			} catch (Exception e) {
				responseMsg = "Error Occurred: " + e.getMessage();
				uuid = UUID.randomUUID().toString();
				BSF.startTransaction(uuid);
				spoolObject = LA_SPOOL.getObjectByCallId(callId);
				if (spoolObject != null) {
					spoolObject.setSTATUS("Mandate Creation Failed");
					spoolObject.update();
				}
				BSF.commitTransaction(uuid);
				uuid = UUID.randomUUID().toString();
				BSF.startTransaction(uuid);
				transObject = LA_TRANSACTION_DETAILS
						.getTransactionDetailsByCallId(callId);
				if (transObject != null) {
					transObject.setSTATUS("Mandate Creation Failed");
					transObject.update();
				}
				BSF.commitTransaction(uuid);
			} finally {
				spoolObject = null;
				transObject = null;
				mandate = null;
			}
		}
		return responseMsg;
	}

	public static String compareEntry1Entry2(String callId) {
		LA_TRANSACTION_DETAILS mandate = null;
		LA_TRANSACTION_DETAILS transObject = null;
		String responseMsg = "";
		// Get Mandates for Call ID
		Map<String, LA_TRANSACTION_DETAILS> mandates = getMapObject(
				getMandatesByCallId(callId), "DATAENTRY");
		/*
		 * if(mandates ==null || mandates.size()==0){
		 * 
		 * //throw new BsfConstraintViolationException(
		 * "Mandate dataentry not done by maker and checker");
		 * 
		 * responseMsg="Mandate dataentry not done by maker and checker";
		 * 
		 * }
		 * 
		 * if(mandates.containsKey("MANDATE")){
		 * 
		 * //throw new
		 * BsfConstraintViolationException("Mandate already created");
		 * 
		 * responseMsg="Mandate already created";
		 * 
		 * }
		 * 
		 * if(!mandates.containsKey("ENTRY1") &&
		 * !mandates.containsKey("ENTRY2")){
		 * 
		 * //throw new
		 * BsfConstraintViolationException("Mandate dataentry not found");
		 * 
		 * responseMsg="Mandate dataentry not found";
		 * 
		 * }
		 */
		LA_TRANSACTION_DETAILS mandate1 = mandates.get("ENTRY1");
		LA_TRANSACTION_DETAILS mandate2 = mandates.get("ENTRY2");
		if (mandate1 != null && mandate2 != null) {
			// bank a/c holder name
			/*
			 * if (mandate2.getNAME_OF_BANK_ACT_HOLDER() != null) { if
			 * (mandate2.getNAME_OF_BANK_ACT_HOLDER().compareToIgnoreCase(
			 * mandate1.getNAME_OF_BANK_ACT_HOLDER() == null ? "" :
			 * mandate1.getNAME_OF_BANK_ACT_HOLDER()) != 0) responseMsg =
			 * responseMsg + "A/c Holder Name, "; }
			 */
			// bank name
			if ((mandate1 != null) && (mandate2 != null)) {
				if (mandate2.getBANK_NAME() != null) {
					if (mandate2.getBANK_NAME().compareTo(
							mandate1.getBANK_NAME() == null ? "" : mandate1
									.getBANK_NAME()) != 0)
						responseMsg = responseMsg + "Bank Name, ";
				}
				// bank a/c no
				if (mandate2.getBANK_ACCOUNT_NO() != null) {
					if (mandate2.getBANK_ACCOUNT_NO().compareToIgnoreCase(
							mandate1.getBANK_ACCOUNT_NO() == null ? ""
									: mandate1.getBANK_ACCOUNT_NO()) != 0)
						responseMsg = responseMsg + "Bank A/c No, ";
				}
				// MICR Code
				/*
				 * if(mandate2.getMICR_CODE()!=null){
				 * 
				 * if(mandate2.getMICR_CODE().compareToIgnoreCase(mandate1.
				 * getMICR_CODE () == null ? "":mandate1.getMICR_CODE())!=0)
				 * 
				 * responseMsg=responseMsg+"MICR Code, ";
				 * 
				 * }
				 */
				// IFSC Code
				/*
				 * if (mandate2.getIFSC_CODE() != null) { if
				 * (mandate2.getIFSC_CODE().compareToIgnoreCase(
				 * mandate1.getIFSC_CODE() == null ? "" : mandate1
				 * .getIFSC_CODE()) != 0) responseMsg = responseMsg +
				 * "IFSC Code, "; }
				 */
				// Payment Type
				if (mandate2.getPAY_TYPE() != null) {
					if (mandate2.getPAY_TYPE().compareToIgnoreCase(
							mandate1.getPAY_TYPE() == null ? "" : mandate1
									.getPAY_TYPE()) != 0)
						responseMsg = responseMsg + "Payment Type, ";
				}
				// Account Type
				if (mandate2.getTYPE_OF_ACCOUNT() != null) {
					if (mandate2.getTYPE_OF_ACCOUNT().compareToIgnoreCase(
							mandate1.getTYPE_OF_ACCOUNT() == null ? ""
									: mandate1.getTYPE_OF_ACCOUNT()) != 0)
						responseMsg = responseMsg + "Account Type, ";
				}
				// Credit Card No
				/*
				 * if (mandate2.getCREDIT_CARD_NO() != null) { if
				 * (mandate2.getCREDIT_CARD_NO().compareToIgnoreCase(
				 * mandate1.getCREDIT_CARD_NO() == null ? "" : mandate1
				 * .getCREDIT_CARD_NO()) != 0) responseMsg = responseMsg +
				 * "Credit Card No, "; } // Annuity Card No if
				 * (mandate2.getANNUITY_CARD_NO() != null) { if
				 * (mandate2.getANNUITY_CARD_NO().compareToIgnoreCase(
				 * mandate1.getANNUITY_CARD_NO() == null ? "" : mandate1
				 * .getANNUITY_CARD_NO()) != 0) responseMsg = responseMsg +
				 * "Annuity Card No, "; } // Expiry Date if
				 * (mandate2.getCC_EXPDATE() != null) { if
				 * (mandate2.getCC_EXPDATE().compareToIgnoreCase(
				 * mandate1.getCC_EXPDATE() == null ? "" : mandate1
				 * .getCC_EXPDATE()) != 0) responseMsg = responseMsg +
				 * "CC Expiry Date, "; } // Branch Name if
				 * (mandate2.getBRANCH_NAME() != null) { if
				 * (mandate2.getBRANCH_NAME().compareTo(
				 * mandate1.getBRANCH_NAME() == null ? "" : mandate1
				 * .getBRANCH_NAME()) != 0) responseMsg = responseMsg +
				 * "Branch Name, "; } // Instructions if
				 * (mandate2.getINSTRUCTIONS() != null) { if
				 * (mandate2.getINSTRUCTIONS().compareTo(
				 * mandate1.getINSTRUCTIONS() == null ? "" : mandate1
				 * .getINSTRUCTIONS()) != 0) responseMsg = responseMsg +
				 * "Instructions, "; } // call id if (mandate2.getCALL_ID() !=
				 * null) { if (mandate2.getCALL_ID().compareTo(
				 * mandate1.getCALL_ID() == null ? "" : mandate1 .getCALL_ID())
				 * != 0) responseMsg = responseMsg + "Call Id, "; } // Medical
				 * // if(mandate2.getMEDICAL()!=null){ if
				 * (Double.compare(mandate2.getMEDICAL(), mandate1.getMEDICAL())
				 * != 0) responseMsg = responseMsg + "Medical, "; // } // Stamp
				 * Duty // if(mandate2.getSTAMP_DUTY()!=null){ if
				 * (Double.compare(mandate2.getSTAMP_DUTY(),
				 * mandate1.getSTAMP_DUTY()) != 0) responseMsg = responseMsg +
				 * "Stamp Duty, "; // } // Mandate No if
				 * (mandate2.getMANDATE_NO() != null) { if
				 * (mandate2.getMANDATE_NO().compareTo( mandate1.getMANDATE_NO()
				 * == null ? "" : mandate1 .getMANDATE_NO()) != 0) responseMsg =
				 * responseMsg + "Mandate No, "; }
				 */
				// Sacs Code
				if (mandate2.getSACS_CODE() != null) {
					if (mandate2.getSACS_CODE().compareTo(
							mandate1.getSACS_CODE() == null ? "" : mandate1
									.getSACS_CODE()) != 0)
						responseMsg = responseMsg + "SACS Code, ";
				}
				// Sacs Type
				if (mandate2.getSACS_TYPE() != null) {
					if (mandate2.getSACS_TYPE().compareTo(
							mandate1.getSACS_TYPE() == null ? "" : mandate1
									.getSACS_TYPE()) != 0)
						responseMsg = responseMsg + "SACS Type, ";
				}
				// Payout Type
				if (mandate2.getPAYOUT_TYPE() != null) {
					if (mandate2.getPAYOUT_TYPE().compareTo(
							mandate1.getPAYOUT_TYPE() == null ? "" : mandate1
									.getPAYOUT_TYPE()) != 0)
						responseMsg = responseMsg + "Payout Type, ";
				}
				// Payout Amount
				if (Double.compare(mandate2.getPAYOUT_AMOUNT(),
						mandate1.getPAYOUT_AMOUNT()) == 1)
					responseMsg = responseMsg + "Payout Amount, ";
			}
		}
		if (responseMsg.length() >= 1)
			responseMsg = responseMsg.substring(0, responseMsg.length() - 1);
		return responseMsg;
	}

	// private static final CordysLogger logger =
	// CordysLogger.getCordysLogger(DISBURSAL_SPOOL.class);
	public static String createExcel1(String date1) throws Exception {
		try {
			date1 = date1.toUpperCase();
			String location = PropertyUtil.getProperty(
					"payout_authentication.properties",
					"ipru.payout.DownloadLocation");
			String Folderpath = EIBProperties.getInstallDir() + location;
			new File(Folderpath).mkdir();
			Folderpath = Folderpath + date1 + "prngen.xls";
			FileOutputStream xlsFile = new FileOutputStream(Folderpath);
			HSSFWorkbook workBook = new HSSFWorkbook();
			HSSFSheet workSheet = workBook.createSheet("Spool Data Sheet");
			HSSFCellStyle cstyle = workBook.createCellStyle();
			cstyle.setDataFormat(HSSFDataFormat.getBuiltinFormat("text"));
			HSSFRow rowData = null;
			int rowCount = 0;
			rowData = workSheet.createRow(rowCount);
			rowData.createCell((short) 0).setCellValue("CHDRNUM");
			rowData.createCell((short) 1).setCellValue(
					"NAME_OF_BANK_ACT_HOLDER");
			rowData.createCell((short) 2).setCellValue("BANK_ACCOUNT_NO");
			rowData.createCell((short) 3).setCellValue("IFSC_CODE");
			rowData.createCell((short) 4).setCellValue("PRN_NO");
			rowData.createCell((short) 5).setCellValue("PAYOUT_AMOUNT");
			rowData.createCell((short) 6).setCellValue("CREATED_BY");
			rowData.createCell((short) 7).setCellValue("CREATED_ON");
			rowData.createCell((short) 8).setCellValue("CALL_TYPE");
			rowData.createCell((short) 9).setCellValue("SUB_TYPE");
			rowData.createCell((short) 10).setCellValue("ERROR_REMARKS");
			String query = "SELECT SPOOL.CHDRNUM, SPOOL.CALL_TYPE, SPOOL.SUB_TYPE, SPOOL.ERROR_REMARKS, TRANS.NAME_OF_BANK_ACT_HOLDER, TRANS.BANK_ACCOUNT_NO , "
					+ "TRANS.IFSC_CODE, TRANS.PRN_NO, TRANS.PAYOUT_AMOUNT, TRANS.CREATED_BY, TRANS.CREATED_ON FROM LA_SPOOL SPOOL, LA_TRANSACTION_DETAILS TRANS "
					+ "WHERE SPOOL.SEQ_NO=TRANS.SPOOL_SEQ_NO AND TRANS.PRN_NO IS NOT NULL "
					+ "AND TRANS.CREATED_ON like '" + date1 + "%' ";
			// logger.error(query);
			QueryObject qry = new QueryObject(query);
			// qry.addParameter("date1", "LA_TRANSACTION_DETAILS.CREATED_ON",
			// QueryObject.PARAM_DATE, date1);
			qry.setResultClass(LA_TRANSACTION_DETAILS.class);
			BusObjectIterator<com.ipru_dbmetadata.LA_TRANSACTION_DETAILS> itr = qry
					.getObjects();
			LA_TRANSACTION_DETAILS bo = null;
			while (itr.hasMoreElements()) {
				bo = itr.nextElement();
				rowCount++;
				rowData = workSheet.createRow(rowCount);
				// logger.error(bo.getStringProperty("CHDRNUM"));
				rowData.createCell((short) 0).setCellValue(
						bo.getStringProperty("CHDRNUM"));
				rowData.createCell((short) 1).setCellValue(
						bo.getNAME_OF_BANK_ACT_HOLDER());
				rowData.createCell((short) 2).setCellValue(
						bo.getBANK_ACCOUNT_NO());
				rowData.createCell((short) 3).setCellValue(bo.getIFSC_CODE());
				rowData.createCell((short) 4).setCellValue(bo.getPRN_NO());
				rowData.createCell((short) 5).setCellValue(
						bo.getPAYOUT_AMOUNT());
				rowData.createCell((short) 6).setCellValue(bo.getCREATED_BY());
				Date dt = new Date();
				dt = bo.getCREATED_ON();
				SimpleDateFormat sdf = new SimpleDateFormat(
						"dd-MM-yyyy HH:mm:ss");
				String stringdate = sdf.format(dt);
				rowData.createCell((short) 7).setCellValue(stringdate);
				rowData.createCell((short) 8).setCellValue(
						bo.getStringProperty("CALL_TYPE"));
				rowData.createCell((short) 9).setCellValue(
						bo.getStringProperty("SUB_TYPE"));
				// logger.error(bo.getStringProperty("ERROR_REMARKS"));
				rowData.createCell((short) 10).setCellValue(
						bo.getStringProperty("ERROR_REMARKS"));
			}
			workBook.write(xlsFile);
			xlsFile.close();
			return date1 + "prngen.xls";
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while creating excel");
		}
	}

	/**
	 * @createMandate creates a clone of the current object and inserts the data
	 *                in LA_TRANSACTION_DETAILS with DATAENTRY as "MANDATE"
	 * 
	 * 
	 * 
	 * @param mandateDetails
	 */
	public static void createMandate(LA_TRANSACTION_DETAILS mandateDetails) {

		String uuid = UUID.randomUUID().toString();
		BSF.startTransaction(uuid);
		LA_TRANSACTION_DETAILS finalMandate = (LA_TRANSACTION_DETAILS) mandateDetails
				.clone();
		finalMandate.setDATAENTRY("MANDATE");
		finalMandate.setSEQ_NO(null);
		finalMandate.insert();
		BSF.commitTransaction(uuid);
	}

	public static Connection dbConnect1() {
		int configurationNode = 0;
		try {
			Document doc = new Document();
			String configuration = Config.getDefaultConfig(doc).getDSO();
			configurationNode = doc.parseString(configuration);
			// cordysLogger .error("Inside connectfn");
			int dsoNode = Node.getElement(configurationNode, "dso");
			String connectionString = Node.getAttribute(dsoNode,
					"connectionString", "");
			// cordysLogger .error(connectionString);
			Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection conn = DriverManager.getConnection(connectionString,
					Node.getAttribute(dsoNode, "userId", ""),
					Base64.decode(Node.getAttribute(dsoNode, "password", "")));
			return conn;
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while establishing connection");
		}
	}

	public static void deleteFile(String filePath) {
		try {
			File file = new File(filePath);
			if (file.exists())
				file.delete();
		} catch (Exception e) {
			throw new BsfConstraintViolationException("Error while deletion");
		}
	}

	
	 public static int failedCaseMis(java.util.Date fromDate, java.util.Date toDate){
		 int responseXMl = 0;
		 int reseltSet = 0;
		 int resNode = 0;
		 int dateNodeXML = 0;
		 int resNodeXML = 0;
		try {

			Document document = new Document();
			XqyResultSet busObj = null;
			String rootNode = "<root></root>";
			 responseXMl = BSF.getXMLDocument().parseString(rootNode);
			String data = "";
			int i = 1;
			Date startDate = fromDate;
			Date endDate = toDate;
			Calendar start = Calendar.getInstance();
			start.setTime(startDate);
			Calendar end = Calendar.getInstance();
			end.setTime(endDate);
			start.add(Calendar.DATE, -2);
			//for (Date date = start.getTime(); start.before(end); start.add(Calendar.DATE, 1), date = start.getTime())
				for (Date date = end.getTime(); end.after(start); end.add(Calendar.DATE, -1), date = end.getTime())

			{
				Format formatter = new SimpleDateFormat("dd-MMM-yy");
			    String s = formatter.format(date);
			String queryText = "select COUNT(CASE WHEN (ls.location2 like '%Account already exists%') THEN 1 ELSE NULL END) AS Account_already_exists, COUNT(CASE WHEN (ls.location2 like '%Invalid Client Bankacc%') THEN 1 ELSE NULL END) AS Invalid_Client_Bankacc, COUNT(CASE WHEN (ls.location2 like '%Client role not found%') THEN 1 ELSE NULL END) AS Client_role_not_found, COUNT(CASE WHEN (ls.location2 like '%Database File error%') THEN 1 ELSE NULL END) AS Database_File_error,COUNT(CASE WHEN (ls.location2 like '%HOLD%') THEN 1 ELSE NULL END) AS Hold, COUNT(CASE WHEN (ls.location2 like '%Pymt held cant authorize%') THEN 1 ELSE NULL END) AS Pymt_held_cant_authorize, COUNT(CASE WHEN (ls.location2 like '%Date of Realization Pend%') THEN 1 ELSE NULL END) AS Date_of_Realization_Pend, COUNT(CASE WHEN (ls.location2 like '%Payment > Sub Ac + Pend%') THEN 1 ELSE NULL END) AS Sub_Ac_PendAS400_ERROR, COUNT(CASE WHEN (ls.location2 like '%No Bank details found%') THEN 1 ELSE NULL END) AS No_Bank_details_found, COUNT(CASE WHEN ( (ls.location2 not like '%Account already exists%') and  (ls.location2 not like '%Invalid Client Bankacc%') and (ls.location2 not like '%Client role not found%') and (ls.location2 not like '%Database File error%') and (ls.location2 not like '%HOLD%') and (ls.location2 not like '%Pymt held cant authorize%') and (ls.location2 not like '%Date of Realization Pend%') and (ls.location2 not like '%NULL RESPONSE%') and (ls.location2 not like '%Payment > Sub Ac + Pend%') and (ls.location2 not like '%No Bank details found%') )THEN 1 ELSE NULL END) AS Others1 from la_transaction_details ltd JOIN LA_SPOOL ls ON(ltd.call_id=ls.callid) WHERE TRUNC(ltd.created_on)=:s AND (ltd.dataentry='MANDATE' or ltd.dataentry='DIRECT MANDATE')";
			QueryObject query = new QueryObject(queryText);
			query.addParameter("s", "LA_TRANSACTION_DETAILS.CREATED_ON",
					QueryObject.PARAM_STRING, s);
			query.setResultClass(LA_TRANSACTION_DETAILS.class);

			 busObj = query.execute();
			 reseltSet = busObj.getDatasetNode();			 
		     resNode = 	 XPath.getFirstMatch(".//tuple", null, reseltSet);
		     String dateNode = "<DATE>"+s+"</DATE>";
		      dateNodeXML=BSF.getXMLDocument().parseString(dateNode);
		      resNodeXML= XPath.getFirstMatch(".//la_transaction_details", null, resNode) ;		 			 
			 Node.appendToChildren(dateNodeXML, 0, resNodeXML);
				Node.appendToChildren(resNodeXML, 0, responseXMl);
				//Node.appendToChildren(resNode, 0, responseXMl);
				
			}
			

			return responseXMl;

		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while retrieving data");
		}
		finally{
			
			 if(Node.isValidNode(reseltSet))
				Node.delete(reseltSet);
			 if(Node.isValidNode(resNode))
				Node.delete(resNode);
			 if(Node.isValidNode(dateNodeXML))
				Node.delete(dateNodeXML);
			 if(Node.isValidNode(resNodeXML))
				Node.delete(resNodeXML);
				/*if(Node.isValidNode(responseXMl))
				Node.delete(responseXMl);*/
				
		}
	}

	public static int getClearStatus(String ContractNo) {
		try {
			String query = "select count(*) as count from la_transaction_details where spool_seq_no in (select seq_no from la_spool where chdrnum= :ContractNo and status='S') and prn_no is not null";
			QueryObject query002 = new QueryObject(query);
			query002.addParameter("ContractNo", "LA_SPOOL.CHDRNUM",
					QueryObject.PARAM_STRING, ContractNo);
			return Integer.parseInt(query002.getObject().getStringProperty(
					"COUNT"));
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while updating data");
		}
	}

	public static String getContractNumberByPRNNumber(String prnNumber) {
		try {
			String queryText = "SELECT * FROM LA_SPOOL WHERE SEQ_NO IN (SELECT SPOOL_SEQ_NO FROM LA_TRANSACTION_DETAILS WHERE PRN_NO=:prnNumber)";
			QueryObject query = new QueryObject(queryText);
			query.addParameter("prnNumber", "LA_TRANSACTION_DETAILS.PRN_NO",
					QueryObject.PARAM_STRING, prnNumber);
			query.setResultClass(LA_SPOOL.class);
			LA_SPOOL obj = (LA_SPOOL) query.getObject();
			if (obj != null)
				return obj.getStringProperty("CHDRNUM");
			else
				return null;
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while retrieving data");
		}
	}

	public static BusObjectIterator<com.ipru_dbmetadata.LA_TRANSACTION_DETAILS> getControlMCases() {
		String queryText = "SELECT sp.CALLID,sp.CHDRNUM,tr.MANDATE_NO,sp.CLIENT_ID,sp.LOCATION2,sp.assignee_no,tr.PAY_TYPE,tr.ANNUITY_CARD_NO,tr.BANK_ACCOUNT_NO,tr.MICR_CODE,tr.CREDIT_CARD_NO,tr.PRN_NO,tr.INSTRUCTIONS,tr.PAYOUT_TYPE,tr.BNAME,tr.NAME_OF_BANK_ACT_HOLDER,sp.status FROM la_spool sp JOIN LA_TRANSACTION_DETAILS tr ON sp.callid=tr.call_id  WHERE sp.status LIKE '%FAILED' and CNTRL_M_DATA_FLAG is null and tr.DATAENTRY='MANDATE'";
		QueryObject query = new QueryObject(queryText);
		// query.setResultClass(LA_TRANSACTION_DETAILS.class);
		return query.getObjects();
	}

	/**
	 * 
	 * @getMandatesByCallId get la_transaction details on callid basis
	 * 
	 * @param callId
	 * 
	 * @return
	 */
	public static BusObjectIterator<com.ipru_dbmetadata.LA_TRANSACTION_DETAILS> getMandatesByCallId(
			String callId) {
		String queryText = "select * from \"LA_TRANSACTION_DETAILS\" where \"CALL_ID\" = :callId";
		QueryObject query = new QueryObject(queryText);
		query.addParameter("callId", LA_TRANSACTION_DETAILS.ATTR_CALL_ID,
				QueryObject.PARAM_STRING, callId);// NOPMD
		query.setResultClass(LA_TRANSACTION_DETAILS.class);
		return query.getObjects();
	}

	public static <T extends BusObject> Map<String, T> getMapObject(
			BusObjectIterator<T> itrObject, String key) {
		Map<String, T> map = new HashMap<String, T>();
		while (itrObject.hasMoreElements()) {
			T value = itrObject.nextElement();
			map.put(value.getStringProperty(key), value);
		}
		return map;
	}

	public static BusObjectIterator<com.ipru_dbmetadata.LA_TRANSACTION_DETAILS> GetPRNInfo() {
		try {
			String queryText = "select PRN_NO from LA_TRANSACTION_DETAILS where SENT_TO_DYNASTY = \'N\' and  PRN_NO is NOT NULL";
			QueryObject qry = new QueryObject(queryText);
			return qry.getObjects();
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while retrieving data");
		}
	}

	public static BusObjectIterator<com.ipru_dbmetadata.LA_TRANSACTION_DETAILS> GetPRNInfo_1() {
		try {
			String queryText = "select PRN_NO from LA_TRANSACTION_DETAILS where SENT_TO_DYNASTY = \'N\' and  PRN_NO is NOT NULL";
			QueryObject qry = new QueryObject(queryText);
			qry.setResultClass(LA_TRANSACTION_DETAILS.class);
			return qry.getObjects();
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while retrieving data");
		}
	}

	public static String getSpoolSeq(String callId, String role)

	{
		String queryText = "select  * from la_transaction_details where call_id=:callId ";
		if (role.equals("VendorEntry")) {
			queryText += "and status='SAVE_AS_DRAFT_D1'";
		} else if (role.equals("VendorDoubleEntry")) {
			queryText += "and status='SAVE_AS_DRAFT_D2'";
		} else if (role.equals("VendorManager")) {
			queryText += "and status='SAVE_AS_DRAFT_MANAGER'";
		}
		QueryObject qry = new QueryObject(queryText);

		qry.addParameter("callId", "LA_TRANSACTION_DETAILS.call_id",
				QueryObject.PARAM_STRING, callId);
		qry.setResultClass(LA_TRANSACTION_DETAILS.class);
		try {
			return qry.getObject().getStringProperty("SEQ_NO");
		} catch (Exception e) {
			return null;
		}

	}

	public static BusObjectIterator<com.ipru_dbmetadata.LA_TRANSACTION_DETAILS> GetTransactionDetails_NoPAUTH(
			String Seq_no) {
		try {
			String queryText = "select t.* from la_transaction_details t,la_spool s where t.spool_seq_no = s.seq_no and t.status != \'PAUTH\'"
					+ "and s.seq_no =:Seq_no";
			// cordysLogger.error(queryText);
			QueryObject qry = new QueryObject(queryText);
			qry.addParameter("Seq_no", "LA_SPOOL.SEQ_NO",
					QueryObject.PARAM_STRING, Seq_no);
			qry.setResultClass(LA_TRANSACTION_DETAILS.class);
			return qry.getObjects();
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while retrieving data");
		}
	}

	public static com.ipru_dbmetadata.LA_TRANSACTION_DETAILS getTransactionDetailsByCallId(
			String callId) {
		QueryObject query = null;
		try {
			String queryText = "select * from la_transaction_details where call_id=:callId";
			query = new QueryObject(queryText);
			query.addParameter("callId", "LA_TRANSACTION_DETAILS.call_id",
					QueryObject.PARAM_STRING, callId);
			query.setResultClass(LA_TRANSACTION_DETAILS.class);
			return (LA_TRANSACTION_DETAILS) query.getObject();
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while retrieving data");
		} finally {
			query = null;
		}
	}

	/**
	 * 
	 * 
	 * 
	 * @param callId
	 * 
	 * @return get details of callid whose dataentry value is "MANDATE" so as to
	 *         process for automation Mandate process
	 */
	public static BusObjectIterator<com.ipru_dbmetadata.LA_TRANSACTION_DETAILS> getTransactionDetailsByDataEntry(
			String callId) {
		try {
			String queryText = "select * from la_transaction_details where call_id=:callId and (dataentry='MANDATE' or dataentry='DIRECT MANDATE')";
			QueryObject query = new QueryObject(queryText);
			query.addParameter("callId", "LA_TRANSACTION_DETAILS.call_id",
					QueryObject.PARAM_STRING, callId);
			query.setResultClass(LA_SPOOL.class);
			return query.getObjects();
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while retrieving data");
		}
	}

	public static com.cordys.cpc.bsf.busobject.BusObject getUserId(String REQ_NO) {
		try {
			String queryText = "SELECT CREATED_BY FROM la_transaction_details WHERE prn_no=:REQ_NO";
			QueryObject qry = new QueryObject(queryText);
			qry.addParameter("REQ_NO", "LA_TRANSACTION_DETAILS.PRN_NO",
					QueryObject.PARAM_STRING, REQ_NO);
			qry.setResultClass(LA_TRANSACTION_DETAILS.class);
			return qry.getObject();
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while retrieving data");
		}
	}

	public static boolean OCRCasesForMandate() {
		LA_SPOOL spoolObject = null;
		BusObjectIterator<LA_SPOOL> spoolObjectIterator = spoolObject
				.getOCRPassCases();
		if (spoolObjectIterator == null) {
			throw new BsfConstraintViolationException(
					"No cases found for OCR Mandate");
		}
		while (spoolObjectIterator.hasMoreElements()) {
			LA_TRANSACTION_DETAILS mandate = new LA_TRANSACTION_DETAILS();
			Date myDate = new Date();
			String user = BSF.getUser();
			user = user.substring(3, user.indexOf(","));
			try {
				spoolObject = spoolObjectIterator.nextElement();
				if (spoolObject.getCUST_FULL_NAME() == null) {
					mandate.setNAME_OF_BANK_ACT_HOLDER(spoolObject
							.getASSIGNEE_NAME());
				} else {
					mandate.setNAME_OF_BANK_ACT_HOLDER(spoolObject
							.getCUST_FULL_NAME());
				}
				mandate.setBANK_NAME(spoolObject.getBANKNAME());
				mandate.setBANK_ACCOUNT_NO(spoolObject.getACCOUNT_NO());
				mandate.setTYPE_OF_ACCOUNT(spoolObject.getACCOUNTTYPE());
				mandate.setMICR_CODE(spoolObject.getMICR_CODE());
				mandate.setIFSC_CODE(spoolObject.getIFSC_CODE());
				mandate.setCALL_ID(spoolObject.getCALLID());
				mandate.setPAY_TYPE(spoolObject.getMODE_OF_PAYMENT());
				mandate.setPAYOUT_AMOUNT(spoolObject.getPAYMENT_AMOUNT());
				mandate.setCREATED_ON(spoolObject.getCREATED_ON());
				mandate.setSPOOL_SEQ_NO(spoolObject.getSEQ_NO());
				mandate.setSTATUS("ENTRY1 DONE");
				mandate.setCREATED_BY("SPAARC");
				mandate.setCREATED_ON(myDate);
				mandate.setDATAENTRY("ENTRY1");
				mandate.setCLIENT_ID(spoolObject.getCLIENT_ID());
				// String callType=spoolObject.getCALL_TYPE();
				// String subType=spoolObject.getSUB_TYPE(
				mandate.setSACS_CODE(spoolObject.getSACS_CODE());
				mandate.setSACS_TYPE(spoolObject.getSACS_TYPE());
				mandate.setPAYOUT_TYPE(spoolObject.getPAY_OUT_TYPE());
				mandate.insert();
				LA_TRANSACTION_DETAILS mandateClone = (LA_TRANSACTION_DETAILS) mandate
						.clone();
				mandateClone.setSTATUS("ENTRY2 DONE");
				mandateClone.setCREATED_BY("OCR");
				mandateClone.setCREATED_ON(myDate);
				mandateClone.setDATAENTRY("ENTRY2");
				mandateClone.insert();
				LA_TRANSACTION_DETAILS finalMandate = (LA_TRANSACTION_DETAILS) mandateClone
						.clone();
				finalMandate.setSTATUS(mandateClone.getSTATUS());
				finalMandate.setDATAENTRY("DIRECT MANDATE");
				finalMandate.setCREATED_BY("SPAARC");
				finalMandate.setCREATED_ON(myDate);
				finalMandate.insert();

				mandate = null;
				mandateClone = null;
				finalMandate = null;
			} catch (Exception e) {
				throw new BsfConstraintViolationException(
						"Error while OCRMandate");
			}

		}
		return true;
	}

	public static BusObjectIterator<LA_TRANSACTION_DETAILS> OCRDirectCases() {
		String queryText = "select call_id from la_transaction_details where dataentry='DIRECT MANDATE' and STATUS='ENTRY2 DONE'";
		QueryObject query = new QueryObject(queryText);
		query.setResultClass(LA_TRANSACTION_DETAILS.class);
		return query.getObjects();
	}

	/**
	 * The User has rejected the call log.
	 * 
	 * we have to update the stage Id -> 0 for the case in LA SPOOL Table
	 * 
	 * SET STATUS ->CREATED CREATE REJECTED
	 * 
	 * Also we need to assign it back to SPAARC saying that the case is been
	 * rejected by the bendor.
	 * 
	 * 
	 * 
	 * @param callId
	 * 
	 * @param rejectReason
	 * 
	 * @return
	 */
	public static boolean rejectCallLog(String callId, String rejectReason) {
		return true;
	}

	public static String UpdatePRN_nos(Connection conn, String values) {
		try {
			Statement stmt;
			conn.setAutoCommit(false);
			stmt = conn.createStatement();
			String[] value = values.split("#");
			for (int i = 2; i < value.length; i++) {
				stmt.addBatch("Update LA_TRANSACTION_DETAILS set SENT_TO_DYNASTY = \'N\' WHERE PRN_NO=\'"
						+ value[i] + "\'");
			}
			stmt.executeBatch();
			conn.commit();
			conn.setAutoCommit(true);
			stmt.close();
			return ("True");
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while updating data");
		}
	}

	public static String UpdatePRNValues(String values) {
		try {
			String result = "Error";
			Connection conn = dbConnect1();
			if (conn != null) {
				result = UpdatePRN_nos(conn, values);
			}
			return result;
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while updating data");
		}
	}

	public static String UpdateStatus(String ContractNo) {
		try {
			String result = "Error";
			Connection conn = dbConnect1();
			if (conn != null) {
				result = UpdateStatus_1(conn, ContractNo);
			}
			return result;
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while updating data");
		}
	}

	public static String UpdateStatus_1(Connection conn, String ContractNo) {
		try {
			Statement stmt;
			conn.setAutoCommit(false);
			stmt = conn.createStatement();
			stmt.addBatch("update la_spool set status='T' where seq_no in (select seq_no from la_spool spool where chdrnum = \'"
					+ ContractNo
					+ "\' and not exists (select 1 from la_transaction_details  txn where spool.seq_no = txn.spool_seq_no"
					+ " and (PRN_no is not null)))");
			stmt.executeBatch();
			conn.commit();
			conn.setAutoCommit(true);
			stmt.close();
			return ("True");
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while updating data");
		}
	}

	public static String UpdateStatusNew(String ContractNo) {
		String flag = "False";
		try {
			String qry = "select count(*)  as count from la_spool where chdrnum= '"
					+ ContractNo + "'";
			QueryObject qry001 = new QueryObject(qry);
			qry001.getObject();
			if (Integer.parseInt(qry001.getObject().getStringProperty("COUNT")) > 0) {
				String query = "with temp as (select count(*) as count_prn_null, spool_seq_no as seq_prn_null from la_transaction_details"
						+ " where spool_seq_no in (select seq_no from la_spool where chdrnum= '"
						+ ContractNo
						+ "') and prn_no is  null group by spool_seq_no), "
						+ " temp1 as (select count(*) as count_all, spool_seq_no as seq_all from la_transaction_details "
						+ "where spool_seq_no in (select seq_no from la_spool where chdrnum= '"
						+ ContractNo
						+ "')  group by spool_seq_no) "
						+ " select (count_all - count_prn_null) as count, temp.seq_prn_null from temp, temp1 where temp.seq_prn_null = temp1.seq_all ";
				QueryObject query002 = new QueryObject(query);
				BusObjectIterator<BusObject> boi = query002.getObjects();
				int flag1 = 0;
				while (boi.hasMoreElements()) {
					if (Integer.parseInt(boi.nextElement().getStringProperty(
							"COUNT")) == 0) {
						flag1 = 1;
					}
				}
				if (flag1 == 1) {
					String dmlStat00 = "UPDATE LA_SPOOL SET STATUS='T' WHERE SEQ_NO IN "
							+ "(SELECT SEQ_NO FROM LA_SPOOL WHERE CHDRNUM= \'"
							+ ContractNo
							+ "\' and exists "
							+ "(SELECT 1 FROM LA_TRANSACTION_DETAILS txn WHERE la_spool.seq_no= "
							+ "txn.spool_seq_no     and (PRN_NO is null)))";
					DMLStatement dml = new DMLStatement(dmlStat00);
					dml.execute();
					flag = "True";
				} else
					flag = "PRN already generated";
			} else
				flag = "Contract number does not exist in Database";
		} catch (Exception e2) {
			flag = e2.getMessage();
		}
		return flag;
	}

	public static BusObjectIterator<com.ipru_dbmetadata.LA_TRANSACTION_DETAILS> vendorManagerData(
			String callId) {
		try {
			String queryText = "SELECT name_of_bank_act_holder , bank_name,   bank_account_no,   micr_code,   ifsc_code,   pay_type,   type_of_account,   credit_card_no,   annuity_card_no,   cc_expdate,   BNAME,   instructions,   call_id,  payout_amount,   medical,   stamp_duty,  mandate_no,   sacs_code,   sacs_type,   payout_type,   dataentry AS dataentry FROM la_transaction_details WHERE call_id =:callId AND (dataentry='ENTRY1' OR dataentry  ='ENTRY2') UNION ALL SELECT CUST_FULL_NAME as name_of_bank_act_holder, bankname as bank_name,   account_no as bank_account_no,   micr_code,   ifsc_code,  MODE_OF_PAYMENT            AS pay_type,   ACCOUNTTYPE             AS type_of_account,   '' as credit_card_no,   '' as annuity_card_no,   '' as cc_expdate,   '' as BNAME,   '' as instructions,   '' as call_id,   payment_amount AS payout_amount,  0 as medical, 0 as  stamp_duty,  MANDATE_NO,sacs_code,sacs_type,pay_out_type,   'SPAARC'       AS dataentry FROM la_spool WHERE callid=:callId ";
			QueryObject query = new QueryObject(queryText);
			query.addParameter("callId", "LA_TRANSACTION_DETAILS.call_id",
					QueryObject.PARAM_STRING, callId);
			query.setResultClass(LA_SPOOL.class);
			return query.getObjects();
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while retrieving data");
		}
	}

	// private static final CordysLogger cordysLogger =
	// CordysLogger.getCordysLogger(LA_TRANSACTION_DETAILS.class);
	public LA_TRANSACTION_DETAILS() {
		this((BusObjectConfig) null);
	}

	public LA_TRANSACTION_DETAILS(BusObjectConfig config) {
		super(config);
	}

	/**
	 * 
	 * We are inserting a new record in the {@link LA_SPOOL_HIST} Table each
	 * item a new mandate is created
	 * 
	 * This will help in tracking who has created the mandate and when
	 */
	public void insertTrackRecord() {
		LA_SPOOL_HIST history = new LA_SPOOL_HIST();
		history.setCALLID(this.getSEQ_NO());
		history.setSTAGE(this.getDATAENTRY());
		history.setSTATUS("CREATED");
		history.insert();
	}

	@Override
	protected void onAfterInsert() {
		// TODO Auto-generated method stub
		insertTrackRecord();
	}

	@Override
	public void onBeforeInsert() {
		if (PropertyUtil.IsAlphanumericExistsWithSomSplChr(this
				.getNAME_OF_BANK_ACT_HOLDER()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format NAME_OF_BANK_ACT_HOLDER.Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSomSplChr(this
				.getINSTRUCTIONS()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format INSTRUCTIONS .Please contact your Administrator");
		/*
		 * if(PropertyUtil.IsAlphanumericExistsWithSpace(this.getBANK_ACCOUNT_NO(
		 * )))
		 * 
		 * throw new BsfConstraintViolationException(
		 * "Error in Passing Data Format BANK_ACCOUNT_NO .Please contact your Administrator"
		 * );
		 */
		if (PropertyUtil.IsnumericExists(this.getSPOOL_SEQ_NO()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format SPOOL_SEQ_NO .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSomSplChr(this.getBANK_NAME()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format BANK_NAME.Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSomSplChr(this
				.getBRANCH_NAME()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format BRANCH_NAME .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getCALL_ID()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format CALL_ID .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getIFSC_CODE()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format IFSC_CODE.Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getMICR_CODE()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format MICR_CODE .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getPAY_TYPE()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format PAY_TYPE.Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this
				.getTYPE_OF_ACCOUNT()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format TYPE_OF_ACCOUNT .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getBNAME()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format BNAME.Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getPRN_NO()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format PRN_NO .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getMANDATE_NO()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format MANDATE_NO.Please contact your Administrator");
		this.setCREATED_ON(new Date());
	}

	@Override
	public void onBeforeUpdate() {
		if (PropertyUtil.IsAlphanumericExistsWithSomSplChr(this
				.getNAME_OF_BANK_ACT_HOLDER()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format NAME_OF_BANK_ACT_HOLDER.Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSomSplChr(this
				.getINSTRUCTIONS()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format INSTRUCTIONS .Please contact your Administrator");
		/*
		 * if(PropertyUtil.IsAlphanumericExistsWithSpace(this.getBANK_ACCOUNT_NO(
		 * )))
		 * 
		 * throw new BsfConstraintViolationException(
		 * "Error in Passing Data Format BANK_ACCOUNT_NO .Please contact your Administrator"
		 * );
		 */
		if (PropertyUtil.IsnumericExists(this.getSPOOL_SEQ_NO()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format SPOOL_SEQ_NO .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSomSplChr(this.getBANK_NAME()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format BANK_NAME.Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSomSplChr(this
				.getBRANCH_NAME()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format BRANCH_NAME .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getCALL_ID()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format CALL_ID .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getIFSC_CODE()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format IFSC_CODE.Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getMICR_CODE()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format MICR_CODE .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getPAY_TYPE()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format PAY_TYPE.Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this
				.getTYPE_OF_ACCOUNT()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format TYPE_OF_ACCOUNT .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getBNAME()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format BNAME.Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getPRN_NO()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format PRN_NO .Please contact your Administrator");
		if (PropertyUtil.IsAlphanumericExistsWithSpace(this.getMANDATE_NO()))
			throw new BsfConstraintViolationException(
					"Error in Passing Data Format MANDATE_NO.Please contact your Administrator");
	}

	@Override
	public void onInsert() {
		try {
			String user = BSF.getUser();
			user = user.substring(3, user.indexOf(","));
			if (this.getCREATED_BY() == null) {
				this.setCREATED_BY(user);
			}
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while inserting data");
		}
	}
	  public static BusObjectIterator<com.ipru_dbmetadata.LA_TRANSACTION_DETAILS> getDataByLAErrorAndDate(String LAError, String createdOn)
    {
    	try {
    		String queryText="";
			if(LAError.equalsIgnoreCase("OTHER"))
			{
				queryText = "SELECT la_transaction_details.call_id,la_spool.chdrnum, la_transaction_details.mandate_no, la_transaction_details.prn_no,la_transaction_details.created_on, la_transaction_details.status,la_transaction_details.dataentry,la_spool.location2 FROM itransact.la_transaction_details,itransact.la_spool WHERE la_transaction_details.call_id=la_spool.callid and TRUNC(la_transaction_details.created_on)=:createdOn AND la_transaction_details.dataentry in ('MANDATE','DIRECT MANDATE') and ((la_spool.location2 not like '%Account already exists%') and (la_spool.location2 not like '%Client role not found%') and (la_spool.location2 not like '%Invalid Client Bankacc%') and (la_spool.location2 not like '%Database File error%') and (la_spool.location2 not like '%No Bank details found%') and (la_spool.location2 not like '%Date of Realization Pend%')  and (la_spool.location2 not like '%Payment > Sub Ac + Pend%')and (la_spool.location2 not like '%HOLD%') and  (la_spool.location2 not like '%Pymt held cant authorize%'))";
			}
			else
			queryText = "SELECT la_transaction_details.call_id,la_spool.chdrnum, la_transaction_details.mandate_no, la_transaction_details.prn_no,la_transaction_details.created_on, la_transaction_details.status,la_transaction_details.dataentry,la_spool.location2 FROM itransact.la_transaction_details,itransact.la_spool WHERE la_transaction_details.call_id=la_spool.callid and TRUNC(la_transaction_details.created_on)=:createdOn AND la_transaction_details.dataentry='MANDATE' and la_spool.location2 like :LAError";
	
			QueryObject query = new QueryObject(queryText);
			query.addParameter("createdOn", "LA_TRANSACTION_DETAILS.created_on",
					QueryObject.PARAM_STRING, createdOn);
			if(!LAError.equalsIgnoreCase("OTHER"))
				query.addParameter("LAError", "LA_SPOOL.LOCATION2",	QueryObject.PARAM_STRING,"%"+LAError+"%");
			query.setResultClass(LA_TRANSACTION_DETAILS.class);
			return query.getObjects();
		} catch (Exception e) {
			throw new BsfConstraintViolationException(
					"Error while retrieving data");
		}
    }
	    public static String emailTemplateForFailedMis(java.util.Date fromDate, java.util.Date toDate)
	    {
			int laTransactionObjects = 0;
			laTransactionObjects = LA_TRANSACTION_DETAILS.failedCaseMis(fromDate,toDate);
			String la_transString=Integer.toString(laTransactionObjects);
			int[] transObj = null;
			String startDate= null;
			String accAlreadyExists = null;
			String invalidClientBankAcc = null;
			String clientRoleNotFound = null;
			String databaseFileError = null;
			String pymtHeldCantAuthorize = null;
			String dateOfRealizationPend = null;
			String subAcPendAS400Error = null;
			String noBankDetailsFound = null;
			String hold = null;
			String others = null;
			String mailTemplate=null;
			mailTemplate="<table><tr><td><table width='650'  align='center' border='0' class='full-width'><tr><td><br/>Dear Team,</td></tr><tr><td><br/>Please find below report :</td></tr><tr><td><br/></td></tr><tr><td><table border='1px' style='border-collapse:collapse;' ><tr><td width='30%'><b>Date</b></td><td><b>Account Already Exists</b></td><td><b>Invalid Client BankAcc</b></td><td><b>Client Role Not Found</b></td><td><b>Database File Error</b></td><td><b>Pymt Held</b></td><td><b>Date Of Realization Pend</b></td><td><b>Sub AC Pend</b></td><td><b>No Bank Details Found</b></td><td><b>Hold</b></td><td><b>Others</b></td></tr>";			
			transObj = XPath.getMatchingNodes(".//la_transaction_details", null, laTransactionObjects);
			for(int i=0;i<transObj.length;i++) {
				startDate = Node.getData(XPath.getFirstMatch(".//DATE", null, transObj[i]));
				accAlreadyExists = Node.getData(XPath.getFirstMatch(".//ACCOUNT_ALREADY_EXISTS", null, transObj[i]));
				invalidClientBankAcc = Node.getData(XPath.getFirstMatch(".//INVALID_CLIENT_BANKACC", null, transObj[i]));
				clientRoleNotFound = Node.getData(XPath.getFirstMatch(".//CLIENT_ROLE_NOT_FOUND", null, transObj[i]));
				databaseFileError = Node.getData(XPath.getFirstMatch(".//DATABASE_FILE_ERROR", null, transObj[i]));
				pymtHeldCantAuthorize = Node.getData(XPath.getFirstMatch(".//PYMT_HELD_CANT_AUTHORIZE", null, transObj[i]));
				dateOfRealizationPend = Node.getData(XPath.getFirstMatch(".//DATE_OF_REALIZATION_PEND", null, transObj[i]));
				subAcPendAS400Error = Node.getData(XPath.getFirstMatch(".//SUB_AC_PENDAS400_ERROR", null, transObj[i]));
				noBankDetailsFound = Node.getData(XPath.getFirstMatch(".//NO_BANK_DETAILS_FOUND", null, transObj[i]));
				hold = Node.getData(XPath.getFirstMatch(".//HOLD", null, transObj[i]));
				others = Node.getData(XPath.getFirstMatch(".//OTHERS1", null, transObj[i]));
				
				mailTemplate=mailTemplate+"<tr><td>"+startDate+"</td><td align='right'>"+accAlreadyExists+"</td><td align='right'>"+invalidClientBankAcc+"</td><td align='right'>"+clientRoleNotFound+"</td><td align='right'>"+databaseFileError+"</td><td align='right'>"+pymtHeldCantAuthorize+"</td><td align='right'>"+dateOfRealizationPend+"</td><td align='right'>"+subAcPendAS400Error+"</td><td align='right'>"+noBankDetailsFound+"</td><td align='right'>"+hold+"</td><td align='right'>"+others+"</td></tr>";
								
		    }
			
			mailTemplate=mailTemplate+"</table></td></tr><tr><td><br/>Thanks &amp; Regards,</td></tr><tr><td>Payout Team</td></tr></table></td></tr></table>";
			return mailTemplate;
			
}
}
